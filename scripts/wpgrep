#!/usr/local/perls/perl-5.18.1/bin/perl
use v5.16;
use strict;
use warnings;

use Getopt::Long qw(GetOptions);
use WordPress::Grep;

binmode STDOUT, ':utf8';

my( 
	$code, $database, $host, $like, $password, $port, $regex, $user,
	) = ();

GetOptions (
	"c|code"            => \$code,
	"d|db|database=s"   => \$database,
	"h|host=s"          => \$host,
	"l|like"            => \$like,
	"p|password=s"      => \$password,
	"port=i"            => \$port,
	"r|regex"           => \$regex,
	"u|user=s"          => \$user,
	);

if( defined $code ) {
	my( $package, $subroutine ) = $code =~ m/(.*)::(.*)/;
	die "Illegal package name [$package]\n" 
		unless $package =~ /\A([A-Z0-9_]+::)[A-Z0-9_]+\z/;
	unless( eval "require $package; 1" ) {
		die "Could not load package [$package]: $@\n";
		}
	unless( eval { $package->can( $subroutine ) } ) {
		die "Package [$package] does not implement [$subroutine]\n";
		}
		
	my $code_ref = sub { no strict 'refs'; &{"$code"}( @_ ); };
	}

say "User is [$user]";
my $wpgrep = Wordpress::Grep->connect(
	defined $host     ? ( host => $host )         : (),
	defined $port     ? ( port => $port )         : (),
	defined $user     ? ( user => $user )         : (),
	defined $database ? ( database => $database ) : (),
	defined $password ? ( password => $password ) : (),
	);
	
my $posts = $wpgrep->search(
	defined $like  ? ( sql_like => $like ) : (),
	defined $regex ? ( regex => $regex )   : (),
	defined $code  ? ( code => $code )     : (),
	);
say "There are " . keys( %$posts ) . " posts";
say "-" x 50 if keys( %$posts );
foreach my $ID ( sort { $a <=> $b } keys %$posts ) {
	printf "%4d %-30s %-50s\n",
		@{$posts->{$ID}}{ qw(ID post_name post_title) };
	}
